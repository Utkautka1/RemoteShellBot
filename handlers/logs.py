from aiogram import Router, F
from aiogram.types import CallbackQuery
from keyboards.pc_control import get_logs_keyboard, get_pc_control_keyboard
from texts.messages import LOGS_MENU, API_ERROR
from utils.api_client import api_client

router = Router()

@router.callback_query(F.data == "logs")
async def logs_menu_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ª–æ–≥–æ–≤"""
    await callback.message.edit_text(
        LOGS_MENU,
        reply_markup=get_logs_keyboard()
    )

@router.callback_query(F.data == "system_log")
async def system_log_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ª–æ–≥–∞"""
    logs = api_client.get_system_log()
    if logs:
        log_text = "üìã –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π):\n\n"
        for i, log in enumerate(logs[:10]):
            source = log.get('Source', 'Unknown')
            message = log.get('Message', 'No message')
            time = log.get('TimeGenerated', 'Unknown')
            
            log_text += f"{i+1}. {source}\n"
            log_text += f"   –í—Ä–µ–º—è: {time}\n"
            log_text += f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {message[:100]}...\n\n"
        
        if len(logs) > 10:
            log_text += f"... –∏ –µ—â–µ {len(logs) - 10} –∑–∞–ø–∏—Å–µ–π"
        
        await callback.message.edit_text(
            log_text,
            reply_markup=get_logs_keyboard()
        )
    else:
        await callback.message.edit_text(
            API_ERROR,
            reply_markup=get_logs_keyboard()
        )

@router.callback_query(F.data == "network_log")
async def network_log_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–µ—Ç–µ–≤–æ–≥–æ –ª–æ–≥–∞"""
    logs = api_client.get_network_log()
    if logs:
        log_text = "üåê –°–µ—Ç–µ–≤–æ–π –ª–æ–≥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π):\n\n"
        for i, log in enumerate(logs[:10]):
            source = log.get('Source', 'Unknown')
            message = log.get('Message', 'No message')
            time = log.get('TimeGenerated', 'Unknown')
            
            log_text += f"{i+1}. {source}\n"
            log_text += f"   –í—Ä–µ–º—è: {time}\n"
            log_text += f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {message[:100]}...\n\n"
        
        if len(logs) > 10:
            log_text += f"... –∏ –µ—â–µ {len(logs) - 10} –∑–∞–ø–∏—Å–µ–π"
        
        await callback.message.edit_text(
            log_text,
            reply_markup=get_logs_keyboard()
        )
    else:
        await callback.message.edit_text(
            API_ERROR,
            reply_markup=get_logs_keyboard()
        )

@router.callback_query(F.data == "event_log")
async def event_log_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∞ —Å–æ–±—ã—Ç–∏–π"""
    logs = api_client.get_event_log()
    if logs:
        log_text = "üìù –õ–æ–≥ —Å–æ–±—ã—Ç–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π):\n\n"
        for i, log in enumerate(logs[:10]):
            source = log.get('Source', 'Unknown')
            message = log.get('Message', 'No message')
            time = log.get('TimeGenerated', 'Unknown')
            
            log_text += f"{i+1}. {source}\n"
            log_text += f"   –í—Ä–µ–º—è: {time}\n"
            log_text += f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {message[:100]}...\n\n"
        
        if len(logs) > 10:
            log_text += f"... –∏ –µ—â–µ {len(logs) - 10} –∑–∞–ø–∏—Å–µ–π"
        
        await callback.message.edit_text(
            log_text,
            reply_markup=get_logs_keyboard()
        )
    else:
        await callback.message.edit_text(
            API_ERROR,
            reply_markup=get_logs_keyboard()
        )

@router.callback_query(F.data == "error_log")
async def error_log_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∞ –æ—à–∏–±–æ–∫"""
    logs = api_client.get_error_log()
    if logs:
        log_text = "‚ùå –õ–æ–≥ –æ—à–∏–±–æ–∫ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π):\n\n"
        for i, log in enumerate(logs[:10]):
            source = log.get('Source', 'Unknown')
            message = log.get('Message', 'No message')
            time = log.get('TimeGenerated', 'Unknown')
            
            log_text += f"{i+1}. {source}\n"
            log_text += f"   –í—Ä–µ–º—è: {time}\n"
            log_text += f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {message[:100]}...\n\n"
        
        if len(logs) > 10:
            log_text += f"... –∏ –µ—â–µ {len(logs) - 10} –∑–∞–ø–∏—Å–µ–π"
        
        await callback.message.edit_text(
            log_text,
            reply_markup=get_logs_keyboard()
        )
    else:
        await callback.message.edit_text(
            API_ERROR,
            reply_markup=get_logs_keyboard()
        )

@router.callback_query(F.data == "login_log")
async def login_log_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∞ –≤—Ö–æ–¥–æ–≤"""
    logs = api_client.get_login_log()
    if logs:
        log_text = "üîê –õ–æ–≥ –≤—Ö–æ–¥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π):\n\n"
        for i, log in enumerate(logs[:10]):
            source = log.get('Source', 'Unknown')
            message = log.get('Message', 'No message')
            time = log.get('TimeGenerated', 'Unknown')
            
            log_text += f"{i+1}. {source}\n"
            log_text += f"   –í—Ä–µ–º—è: {time}\n"
            log_text += f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {message[:100]}...\n\n"
        
        if len(logs) > 10:
            log_text += f"... –∏ –µ—â–µ {len(logs) - 10} –∑–∞–ø–∏—Å–µ–π"
        
        await callback.message.edit_text(
            log_text,
            reply_markup=get_logs_keyboard()
        )
    else:
        await callback.message.edit_text(
            API_ERROR,
            reply_markup=get_logs_keyboard()
        )

@router.callback_query(F.data == "file_open_log")
async def file_open_log_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤"""
    logs = api_client.get_file_open_log()
    if logs:
        log_text = "üìÅ –õ–æ–≥ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π):\n\n"
        for i, log in enumerate(logs[:10]):
            source = log.get('Source', 'Unknown')
            message = log.get('Message', 'No message')
            time = log.get('TimeGenerated', 'Unknown')
            
            log_text += f"{i+1}. {source}\n"
            log_text += f"   –í—Ä–µ–º—è: {time}\n"
            log_text += f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {message[:100]}...\n\n"
        
        if len(logs) > 10:
            log_text += f"... –∏ –µ—â–µ {len(logs) - 10} –∑–∞–ø–∏—Å–µ–π"
        
        await callback.message.edit_text(
            log_text,
            reply_markup=get_logs_keyboard()
        )
    else:
        await callback.message.edit_text(
            API_ERROR,
            reply_markup=get_logs_keyboard()
        ) 