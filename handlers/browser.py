from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.pc_control import get_browser_keyboard, get_pc_control_keyboard
from texts.messages import (
    BROWSER_MENU, BROWSER_HISTORY, CACHE_CLEARED, COOKIES_CLEARED,
    SITE_OPENED, PAGE_SAVED, TABS_LIST, TAB_CLOSED, FILE_DOWNLOADED,
    ENTER_URL, ENTER_SELECTOR, API_ERROR
)
from utils.api_client import api_client

router = Router()

class BrowserStates(StatesGroup):
    waiting_for_url = State()
    waiting_for_selector = State()

@router.callback_query(F.data == "browser")
async def browser_menu_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –±—Ä–∞—É–∑–µ—Ä–∞"""
    await callback.message.edit_text(
        BROWSER_MENU,
        reply_markup=get_browser_keyboard()
    )

@router.callback_query(F.data == "browser_history")
async def browser_history_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞"""
    await callback.answer(BROWSER_HISTORY)
    
    history = api_client.get_browser_history()
    if history:
        history_text = "üìö –ò—Å—Ç–æ—Ä–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π):\n\n"
        for i, entry in enumerate(history[:10]):
            url = entry.get('url', 'Unknown')
            title = entry.get('title', 'No title')
            time = entry.get('last_visit_time', 'Unknown')
            
            history_text += f"{i+1}. {title}\n"
            history_text += f"   URL: {url}\n"
            history_text += f"   –í—Ä–µ–º—è: {time}\n\n"
        
        if len(history) > 10:
            history_text += f"... –∏ –µ—â–µ {len(history) - 10} –∑–∞–ø–∏—Å–µ–π"
        
        await callback.message.edit_text(
            history_text,
            reply_markup=get_browser_keyboard()
        )
    else:
        await callback.message.edit_text(
            API_ERROR,
            reply_markup=get_browser_keyboard()
        )

@router.callback_query(F.data == "clear_cache")
async def clear_cache_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞"""
    success = api_client.clear_browser_cache()
    if success:
        await callback.answer(CACHE_CLEARED)
        await callback.message.edit_text(
            CACHE_CLEARED,
            reply_markup=get_browser_keyboard()
        )
    else:
        await callback.answer(API_ERROR)

@router.callback_query(F.data == "clear_cookies")
async def clear_cookies_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∫—É–∫–∏"""
    success = api_client.clear_cookies()
    if success:
        await callback.answer(COOKIES_CLEARED)
        await callback.message.edit_text(
            COOKIES_CLEARED,
            reply_markup=get_browser_keyboard()
        )
    else:
        await callback.answer(API_ERROR)

@router.callback_query(F.data == "site_screenshot")
async def site_screenshot_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å–∞–π—Ç–∞"""
    await callback.message.edit_text(
        "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–π—Ç–∞\n\n" + ENTER_URL,
        reply_markup=get_browser_keyboard()
    )
    await state.set_state(BrowserStates.waiting_for_url)

@router.callback_query(F.data == "open_site")
async def open_site_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–∞–π—Ç–∞"""
    await callback.message.edit_text(
        "üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç\n\n" + ENTER_URL,
        reply_markup=get_browser_keyboard()
    )
    await state.set_state(BrowserStates.waiting_for_url)

@router.callback_query(F.data == "save_page")
async def save_page_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    await callback.message.edit_text(
        "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É\n\n" + ENTER_URL,
        reply_markup=get_browser_keyboard()
    )
    await state.set_state(BrowserStates.waiting_for_url)

@router.callback_query(F.data == "open_tabs")
async def open_tabs_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∫–ª–∞–¥–æ–∫"""
    await callback.answer(TABS_LIST)
    
    tabs = api_client.get_open_tabs()
    if tabs:
        tabs_text = "üìë –û—Ç–∫—Ä—ã—Ç—ã–µ –≤–∫–ª–∞–¥–∫–∏:\n\n"
        for i, tab in enumerate(tabs[:10]):
            title = tab.get('MainWindowTitle', 'Unknown')
            pid = tab.get('Id', 'N/A')
            
            tabs_text += f"{i+1}. {title}\n"
            tabs_text += f"   PID: {pid}\n\n"
        
        if len(tabs) > 10:
            tabs_text += f"... –∏ –µ—â–µ {len(tabs) - 10} –≤–∫–ª–∞–¥–æ–∫"
        
        await callback.message.edit_text(
            tabs_text,
            reply_markup=get_browser_keyboard()
        )
    else:
        await callback.message.edit_text(
            API_ERROR,
            reply_markup=get_browser_keyboard()
        )

@router.callback_query(F.data == "download_file")
async def download_file_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
    await callback.message.edit_text(
        "üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª\n\n" + ENTER_URL,
        reply_markup=get_browser_keyboard()
    )
    await state.set_state(BrowserStates.waiting_for_url)

@router.message(BrowserStates.waiting_for_url)
async def process_url(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL"""
    url = message.text.strip()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    action = data.get('action', 'open_site')
    
    if action == 'site_screenshot':
        file_path = api_client.save_site_screenshot(url)
        if file_path:
            await message.answer(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–π—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
        else:
            await message.answer(API_ERROR)
    
    elif action == 'open_site':
        success = api_client.open_site(url)
        if success:
            await message.answer(SITE_OPENED)
        else:
            await message.answer(API_ERROR)
    
    elif action == 'save_page':
        file_path = api_client.save_page(url)
        if file_path:
            await message.answer(f"üíæ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {file_path}")
        else:
            await message.answer(API_ERROR)
    
    elif action == 'download_file':
        await state.update_data(url=url)
        await message.answer(
            "üéØ " + ENTER_SELECTOR,
            reply_markup=get_browser_keyboard()
        )
        await state.set_state(BrowserStates.waiting_for_selector)
        return
    
    await state.clear()

@router.message(BrowserStates.waiting_for_selector)
async def process_selector(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä–∞"""
    selector = message.text.strip()
    data = await state.get_data()
    url = data.get('url')
    
    if url:
        download_path = api_client.download_from_site(url, selector)
        if download_path:
            await message.answer(f"üì• –§–∞–π–ª —Å–∫–∞—á–∞–Ω: {download_path}")
        else:
            await message.answer(API_ERROR)
    
    await state.clear() 