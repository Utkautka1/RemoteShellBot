from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.pc_control import get_media_keyboard, get_pc_control_keyboard
from texts.messages import (
    MEDIA_MENU, SCREENSHOT_SUCCESS, ACTIVE_SCREENSHOT_SUCCESS,
    VIDEO_RECORDING, AUDIO_RECORDING, INTERVAL_PHOTO,
    ENTER_DURATION, ENTER_FPS, ENTER_INTERVAL, ENTER_COUNT,
    ERROR_MESSAGE, API_ERROR
)
from utils.api_client import api_client

router = Router()

class MediaStates(StatesGroup):
    waiting_for_duration = State()
    waiting_for_fps = State()
    waiting_for_interval = State()
    waiting_for_count = State()

@router.callback_query(F.data == "media")
async def media_menu_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –º–µ–¥–∏–∞ —Ñ—É–Ω–∫—Ü–∏–π"""
    await callback.message.edit_text(
        MEDIA_MENU,
        reply_markup=get_media_keyboard()
    )

@router.callback_query(F.data == "screenshot")
async def screenshot_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞"""
    await callback.answer(SCREENSHOT_SUCCESS)
    
    try:
        screenshot_data = api_client.get_screenshot()
        if screenshot_data and isinstance(screenshot_data, bytes):
            # –°–æ–∑–¥–∞–µ–º BufferedInputFile –∏–∑ –±–∞–π—Ç–æ–≤
            photo_file = BufferedInputFile(screenshot_data, filename="screenshot.png")
            await callback.message.answer_photo(
                photo=photo_file,
                caption="üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞"
            )
        else:
            await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}")

@router.callback_query(F.data == "screenshot_active")
async def screenshot_active_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
    await callback.answer(ACTIVE_SCREENSHOT_SUCCESS)
    
    try:
        screenshot_data = api_client.get_active_screenshot()
        if screenshot_data and isinstance(screenshot_data, bytes):
            # –°–æ–∑–¥–∞–µ–º BufferedInputFile –∏–∑ –±–∞–π—Ç–æ–≤
            photo_file = BufferedInputFile(screenshot_data, filename="active_screenshot.png")
            await callback.message.answer_photo(
                photo=photo_file,
                caption="üñºÔ∏è –°–∫—Ä–∏–Ω—à–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"
            )
        else:
            await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}")

@router.callback_query(F.data == "record_video")
async def record_video_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ"""
    await callback.message.edit_text(
        "üé• –ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ\n\n" + ENTER_DURATION,
        reply_markup=get_media_keyboard()
    )
    await state.set_state(MediaStates.waiting_for_duration)

@router.message(MediaStates.waiting_for_duration)
async def process_video_duration(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ"""
    try:
        duration = int(message.text)
        if duration <= 0 or duration > 60:
            await message.answer("‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 60 —Å–µ–∫—É–Ω–¥")
            return
        
        await state.update_data(duration=duration)
        await message.answer(
            "üé¨ " + ENTER_FPS,
            reply_markup=get_media_keyboard()
        )
        await state.set_state(MediaStates.waiting_for_fps)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

@router.message(MediaStates.waiting_for_fps)
async def process_video_fps(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ FPS –¥–ª—è –≤–∏–¥–µ–æ"""
    try:
        fps = int(message.text)
        if fps < 1 or fps > 120:
            await message.answer("‚ùå FPS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 120")
            return
        
        data = await state.get_data()
        duration = data.get('duration', 5)
        
        video_data = api_client.record_video(duration, fps)
        if video_data and isinstance(video_data, bytes):
            # –°–æ–∑–¥–∞–µ–º BufferedInputFile –∏–∑ –±–∞–π—Ç–æ–≤
            video_file = BufferedInputFile(video_data, filename="video.mp4")
            await message.answer_video(
                video=video_file,
                caption=f"üé• –í–∏–¥–µ–æ ({duration}—Å, {fps}fps)"
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ –¥–∞–Ω–Ω—ã–µ")
        
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ: {str(e)}")
        await state.clear()

@router.callback_query(F.data == "record_audio")
async def record_audio_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ"""
    await callback.message.edit_text(
        "üé§ –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ\n\n" + ENTER_DURATION,
        reply_markup=get_media_keyboard()
    )
    await state.set_state(MediaStates.waiting_for_duration)

@router.callback_query(F.data == "interval_photo")
async def interval_photo_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ"""
    await callback.message.edit_text(
        "üì∑ –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ\n\n" + ENTER_INTERVAL,
        reply_markup=get_media_keyboard()
    )
    await state.set_state(MediaStates.waiting_for_interval)

@router.message(MediaStates.waiting_for_interval)
async def process_interval(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —Ñ–æ—Ç–æ"""
    try:
        interval = int(message.text)
        if interval < 100 or interval > 10000:
            await message.answer("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 100 –¥–æ 10000 –º—Å")
            return
        
        await state.update_data(interval=interval)
        await message.answer(
            "üì∏ " + ENTER_COUNT,
            reply_markup=get_media_keyboard()
        )
        await state.set_state(MediaStates.waiting_for_count)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

@router.message(MediaStates.waiting_for_count)
async def process_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ"""
    try:
        count = int(message.text)
        if count < 1 or count > 50:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50")
            return
        
        data = await state.get_data()
        interval = data.get('interval', 1000)
        
        photo_data = api_client.interval_photo(interval, count)
        if photo_data and isinstance(photo_data, bytes):
            # –°–æ–∑–¥–∞–µ–º BufferedInputFile –∏–∑ –±–∞–π—Ç–æ–≤
            photo_file = BufferedInputFile(photo_data, filename="interval_photos.zip")
            await message.answer_document(
                document=photo_file,
                caption=f"üì∑ –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ ({count} —à—Ç., –∏–Ω—Ç–µ—Ä–≤–∞–ª {interval}–º—Å)"
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ")
        
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–æ—Ç–æ: {str(e)}")
        await state.clear() 